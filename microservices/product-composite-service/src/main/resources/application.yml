springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: com.fpivetti.microservices.composite.product
  pathsToMatch: /**

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:
    get-composite-product:
      summary: Returns a composite view of the specified productId
      description: |
        Retrieves information related to the specified productId, including:
        1. Base product information
        
        2. Reviews
        
        3. Recommendations
        
        4. Service Addresses (technical information regarding the addresses of the microservices that created the response)

        # Normal response
        If the requested productId is found, the method will return all the information stored in the database related to that productId.
        
        # Expected error responses
        1. If the specified productId doesn't exist, a **404 - Not Found** error with a "No product found" message will be returned
        
        2. If a productId less than 1 is specified, a **422 - Unprocessable Entity** error with a "Invalid productId" message will be returned
        
        3. If a non-numerical productId is specified, a **400 - Bad Request** error with a "Failed to read HTTP" message will be returned

    create-composite-product:
      summary: Creates a composite product
      description: |
        Creates a composite product by splitting the provided information into separate product-info, recommendation, and review entities.
        
        # Normal response
        The composite product information posted to the API will be split and stored accordingly.
        
        If a recommendationId or a reviewId is less than 1, the creation of that entity will be skipped without throwing any exceptions.
        This means that you can't create a composite product with an Id less than 1 and the system will automatically jump to the next recommendation or review.
        If all IDs are less than 1, a product with no recommendations and reviews will be generated.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           a **422 - Unprocessable Entity** error with a "duplicate key" message will be returned
        
        2. If a product with a productId less than 1 is specified, a **422 - Unprocessable Entity** error with a "Invalid productId" message will be returned
        
        3. If a product with a non-numerical productId is specified, a **400 - Bad Request** error with a "Failed to read HTTP" message will be returned

    delete-composite-product:
      summary: Deletes a composite product
      description: |
        Deletes a composite product along with associated entities such as product information, recommendations, and reviews.
        
        # Normal response
        Entities related to the specified productId will be deleted. The implementation of the delete method is idempotent, 
        i.e. it can be called several times without changing the delete state.
        
        The first call of a DELETE may return a **200 - OK**. Subsequent DELETE calls for the same productId will likely return a **404 - Not Found** error.
        Even if the response code is different after the first request, there is no change of state.

        If a network timeout occurs during a delete operation, you can simply call the delete operation again:
          - If the first request wasn't completed successfully, the second request will delete the product and return a **200 - OK**.
        
          - If the product was deleted after the first request, the second call will return a **404 - Not Found** error.

        Before returning the response code, all recommendation and review entities related to the specified productId will be attempted for deletion, 
        even if they were already removed after the first request.
  
        # Expected error responses
        1. If a product has already been deleted and its entities are no longer available in the database, 
          a **404 - Not Found** error with a "No product found" message will be returned
        
        2. If a productId less than 1 is specified, a **422 - Unprocessable Entity** error with a "Invalid productId" message will be returned
        
        3. If a non-numerical productId is specified, a **400 - Bad Request** error with a "Failed to read HTTP" message will be returned

server.port: 7000
server.error.include-message: always

spring:
  cache:
    type: redis
  data:
    redis:
      host: localhost
      port: 6379

app:
  product-service:
    host: localhost
    port: 7001
  recommendation-service:
    host: localhost
    port: 7002
  review-service:
    host: localhost
    port: 7003

logging:
  level:
    root: INFO
    com.fpivetti: DEBUG
    org.springframework.cache: TRACE

---
spring.config.activate.on-profile: docker
server.port: 8080
spring.data.redis.host: redis

app:
  product-service:
    host: product
    port: 8080
  recommendation-service:
    host: recommendation
    port: 8080
  review-service:
    host: review
    port: 8080

